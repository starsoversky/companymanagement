# Generated by Django 4.2.10 on 2024-03-02 18:35

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("A", "Company A"), ("B", "Company B")], max_length=1
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("phone_number", models.CharField(max_length=20)),
                ("address", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=254)),
                ("registration_number", models.CharField(max_length=255, unique=True)),
                (
                    "registration_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date registration",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CompanyDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("customer_fin", models.CharField(max_length=100)),
                ("service_plan", models.CharField(max_length=100)),
                ("service_type", models.CharField(max_length=100)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="Case",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("time", models.TimeField()),
                ("location", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("photos", models.ImageField(upload_to="uploads/")),
                ("competition_start_date", models.DateField()),
                (
                    "service_document",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="case_doc",
                        to="core.companydocument",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("customer_fin", models.CharField(max_length=100)),
                ("brand", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
                ("year", models.IntegerField()),
                ("color", models.CharField(max_length=100)),
                ("category", models.CharField(max_length=255)),
                ("capacity", models.IntegerField(default=0)),
                ("power", models.CharField(max_length=100)),
                ("structure", models.CharField(max_length=100)),
                ("vin_code", models.CharField(max_length=100, unique=True)),
                ("plate_number", models.CharField(max_length=100, unique=True)),
                (
                    "service_document",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="serv_doc",
                        to="core.companydocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cihaz",
                "verbose_name_plural": "Cihaz",
            },
        ),
        migrations.CreateModel(
            name="MyUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("A", "Company A"),
                            ("B", "Company B"),
                            ("C", "Customer"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Tələb olunur. 50 simvol və ya az. Hərflər, Rəqəmlər və @/./+/-/_ simvollar.",
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[\\w.@+-]+$",
                                "Düzgün istifadəçi adı daxil edin.",
                                "yanlışdır",
                            )
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=100, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        max_length=100,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                ("fin_code", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "registration_number",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("address", models.CharField(max_length=100)),
                ("phone_number", models.CharField(max_length=20)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_blocked",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user should be treated as block. Unselect this instead of deleting accounts.",
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user is base user on web site.",
                        verbose_name="əsas istifadəçi statusu",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="company_user_set",
                        related_query_name="myuser",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="company_user_set",
                        related_query_name="myuser",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "İstifadəçilər",
                "verbose_name_plural": "İstifadəçilər",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CompanyA",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.company",),
        ),
        migrations.CreateModel(
            name="CompanyAUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.myuser",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CompanyB",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.company",),
        ),
        migrations.CreateModel(
            name="CompanyBUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.myuser",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CustomerUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.myuser",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Meeting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("A", "in progress"),
                            ("B", "finished"),
                            ("C", "scheduled"),
                        ],
                        max_length=1,
                    ),
                ),
                ("date", models.DateTimeField()),
                ("time", models.TimeField()),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.asset"
                    ),
                ),
                (
                    "competation",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meeting",
                        to="core.case",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.customeruser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Competition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("submission_date", models.DateTimeField(auto_now_add=True)),
                ("start_date", models.DateTimeField()),
                (
                    "estimated_cost",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("restoration_duration", models.DurationField()),
                ("close_date", models.DateTimeField()),
                (
                    "case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="competitions",
                        to="core.case",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comp_company",
                        to="core.companya",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CompanyOffer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("services_offered", models.CharField(max_length=255)),
                ("winner", models.BooleanField()),
                ("reject", models.BooleanField()),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.competition",
                    ),
                ),
                (
                    "offer_owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.companyb"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="companydocument",
            name="company_a",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comp_doc",
                to="core.companya",
            ),
        ),
        migrations.AddField(
            model_name="companydocument",
            name="company_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="company_user",
                to="core.companyauser",
            ),
        ),
        migrations.AddField(
            model_name="companydocument",
            name="customer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comp_doc",
                to="core.customeruser",
            ),
        ),
        migrations.AddField(
            model_name="case",
            name="customer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="case_cust",
                to="core.customeruser",
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="customer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cust_asset",
                to="core.customeruser",
            ),
        ),
        migrations.CreateModel(
            name="AgreementDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("services_to_provide", models.CharField(max_length=100)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                (
                    "company_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ag_doc",
                        to="core.companya",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ag_owner",
                        to="core.companyb",
                    ),
                ),
            ],
        ),
    ]

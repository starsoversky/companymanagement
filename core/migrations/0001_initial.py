# Generated by Django 4.2.10 on 2024-03-02 22:41

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Accident",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("location", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("photos", models.ImageField(upload_to="uploads/")),
                ("accidentbidding_start_date", models.DateField()),
            ],
            options={
                "verbose_name": "Accident",
                "verbose_name_plural": "Accident",
            },
        ),
        migrations.CreateModel(
            name="AccidentBidding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "accident",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accident_bidding",
                        to="core.accident",
                    ),
                ),
            ],
            options={
                "verbose_name": "Accident bidding",
                "verbose_name_plural": "Accident bidding",
            },
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("A", "Insurance Company"),
                            ("B", "Car Repair Company"),
                        ],
                        max_length=1,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("phone_number", models.CharField(max_length=20)),
                ("address", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=254)),
                ("registration_number", models.CharField(max_length=255, unique=True)),
                (
                    "registration_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date registration",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InsurancePolicy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("customer_fin", models.CharField(max_length=100)),
                ("coverage_plan", models.CharField(max_length=100)),
                ("coverage_type", models.CharField(max_length=100)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Insurance Policy",
                "verbose_name_plural": "Insurance Policy",
            },
        ),
        migrations.CreateModel(
            name="ServicesProvide",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.AddField(
            model_name="accident",
            name="service_document",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="accident_doc",
                to="core.insurancepolicy",
            ),
        ),
        migrations.CreateModel(
            name="MyUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("A", "Company A"),
                            ("B", "Company B"),
                            ("C", "Customer"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Tələb olunur. 50 simvol və ya az. Hərflər, Rəqəmlər və @/./+/-/_ simvollar.",
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[\\w.@+-]+$",
                                "Düzgün istifadəçi adı daxil edin.",
                                "yanlışdır",
                            )
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=100, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        max_length=100,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "fin_code",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="FIN"
                    ),
                ),
                (
                    "registration_number",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("address", models.CharField(max_length=100)),
                ("phone_number", models.CharField(max_length=20)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_blocked",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user should be treated as block. Unselect this instead of deleting accounts.",
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user is base user on web site.",
                        verbose_name="əsas istifadəçi statusu",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="company_user_set",
                        related_query_name="myuser",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="company_user_set",
                        related_query_name="myuser",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "İstifadəçilər",
                "verbose_name_plural": "İstifadəçilər",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CarRepairCompany",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.company",),
        ),
        migrations.CreateModel(
            name="CarRepairCompanyAgent",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.myuser",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CustomerUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.myuser",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="InsuranceAgent",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.myuser",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="InsuranceCompany",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.company",),
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("customer_fin", models.CharField(max_length=100)),
                ("make", models.CharField(max_length=255)),
                ("model", models.CharField(max_length=100)),
                ("year", models.IntegerField()),
                ("color", models.CharField(max_length=100)),
                ("type", models.CharField(max_length=255)),
                ("seating_capacity", models.IntegerField(default=0)),
                ("engine", models.CharField(max_length=100)),
                ("body", models.CharField(max_length=100)),
                ("plate_number", models.CharField(max_length=100, unique=True)),
                (
                    "vin",
                    models.CharField(max_length=100, unique=True, verbose_name="VIN"),
                ),
                (
                    "service_document",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="serv_doc",
                        to="core.insurancepolicy",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cust_vehicle",
                        to="core.customeruser",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vehicle",
                "verbose_name_plural": "Vehicle",
            },
        ),
        migrations.AddField(
            model_name="insurancepolicy",
            name="customer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comp_doc",
                to="core.customeruser",
            ),
        ),
        migrations.AddField(
            model_name="insurancepolicy",
            name="insurance_agent",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="insurance_agent",
                to="core.insuranceagent",
            ),
        ),
        migrations.AddField(
            model_name="insurancepolicy",
            name="insurance_company",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="insurance_company",
                to="core.insurancecompany",
            ),
        ),
        migrations.CreateModel(
            name="CarInsuranceDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("winner", models.BooleanField()),
                ("reject", models.BooleanField()),
                (
                    "accident_bidding",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.accidentbidding",
                    ),
                ),
                (
                    "services_to_provide",
                    models.ManyToManyField(to="core.servicesprovide"),
                ),
                (
                    "offer_owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.carrepaircompany",
                    ),
                ),
            ],
            options={
                "verbose_name": "Car Insurance Document",
                "verbose_name_plural": "Car Insurance Document",
            },
        ),
        migrations.CreateModel(
            name="Appointment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("A", "in progress"),
                            ("B", "finished"),
                            ("C", "scheduled"),
                        ],
                        max_length=1,
                    ),
                ),
                ("date", models.DateTimeField()),
                ("time", models.TimeField()),
                (
                    "competation",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="appointment",
                        to="core.accident",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.vehicle"
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.customeruser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgreementDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                (
                    "services_to_provide",
                    models.ManyToManyField(to="core.servicesprovide"),
                ),
                (
                    "car_repair_company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="car_repair_company",
                        to="core.carrepaircompany",
                    ),
                ),
                (
                    "insurance_agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="insurance_agent",
                        to="core.insurancecompany",
                    ),
                ),
            ],
            options={
                "verbose_name": "Agreement document",
                "verbose_name_plural": "Agreement document",
            },
        ),
        migrations.AddField(
            model_name="accidentbidding",
            name="company",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comp_company",
                to="core.insurancecompany",
            ),
        ),
        migrations.AddField(
            model_name="accident",
            name="customer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="accident_cust",
                to="core.customeruser",
            ),
        ),
    ]
